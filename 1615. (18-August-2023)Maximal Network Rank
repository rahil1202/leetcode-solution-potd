

class Solution {
public:
    int maximalNetworkRank(int n, std::vector<std::vector<int>>& roads) {
        std::vector<std::vector<bool>> isConnected(n, std::vector<bool>(n, false)); // Matrix to store connectivity
        std::vector<int> cityDegree(n, 0); // To store the degree of each city
        
        // Fill the matrix and count degrees
        for (const auto& road : roads) {
            int city1 = road[0];
            int city2 = road[1];
            isConnected[city1][city2] = isConnected[city2][city1] = true;
            cityDegree[city1]++;
            cityDegree[city2]++;
        }
        
        int maxRank = 0;
        
        // Calculate maximal network rank by checking all pairs of cities
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int rank = cityDegree[i] + cityDegree[j]; // Start with the sum of degrees
                if (isConnected[i][j]) {
                    // If the two cities are directly connected, subtract 1 from the rank
                    rank--;
                }
                maxRank = std::max(maxRank, rank);
            }
        }
        
        return maxRank;
    }
};
